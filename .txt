import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from pdf2docx import Converter
import os
import subprocess
import platform

sistema_operativo = platform.system()

if sistema_operativo == 'Windows':
    import comtypes.client

ruta_descargas = os.path.join(os.path.expanduser("~"), "Downloads")

def log_mensaje(mensaje):
    text_area.config(state="normal")
    text_area.insert(tk.END, mensaje + "\n")
    text_area.yview_moveto(1.0)  # Mover siempre al final
    text_area.config(state="disabled")
    text_area.update()

# Notebook File

def seleccionar_archivo():
    file = filedialog.askopenfilename(
        title="Seleccionar archivo",
        filetypes=[
            ("Documentos", "*.pdf *.docx *.doc *.docm *.odt"),
            ("PDF files", "*.pdf"),
            ("Word Documents", "*.docx *.doc *.docm"),
            ("OpenDocument Text", "*.odt"),
            ("Todos los archivos", "*.*")
        ]
    )
    if entrada_file:
        entrada_file.config(state="normal")
        entrada_file.delete(0, tk.END)
        entrada_file.insert(0, file)
        entrada_file.config(state="disabled")

def convertir_pdf_to_word():
    archivo_origen = entrada_file.get()
    
    if not archivo_origen.lower().endswith('.pdf'):
        messagebox.showerror("Error", "The selected file is not a PDF")
        return

    log_mensaje("Starting PDF to Word conversion ...")

    archivo_nombre = os.path.basename(archivo_origen)
    archivo_docx = os.path.join(ruta_descargas, archivo_nombre.replace('.pdf', '.docx'))
    
    log_mensaje(f"Converting: {archivo_nombre}...")
    try:
        cv = Converter(archivo_origen)
        cv.convert(archivo_docx, start=0, end=None)
        cv.close()
        log_mensaje(f"✅ Converted: {archivo_nombre} to Docx.")
    except Exception as e:
        log_mensaje(f"❌ Error converting {archivo_nombre}: {e}")

    log_mensaje("PDF to Word conversion complete.")

def convertir_docx_to_pdf():
    archivo_origen = entrada_file.get()
    
    if not archivo_origen.lower().endswith('.docx'):
        messagebox.showerror("Error", "The selected file is not a DOCX")
        return

    log_mensaje("Starting Word to PDF conversion...")

    archivo_nombre = os.path.basename(archivo_origen)
    archivo_pdf = os.path.abspath(os.path.join(ruta_descargas, archivo_nombre.replace('.docx', '.pdf')))
    
    try:
        if sistema_operativo == 'Windows':
            word = comtypes.client.CreateObject("Word.Application")
            word.Visible = False

            log_mensaje(f"Converting: {archivo_nombre}...")
            doc = word.Documents.Open(os.path.abspath(archivo_origen))
            doc.SaveAs(archivo_pdf, FileFormat=17)
            doc.Close()
            word.Quit()
            log_mensaje(f"✅ Converted: {archivo_nombre} a PDF.")

        elif sistema_operativo == 'Linux':
            log_mensaje(f"Converting: {archivo_nombre}...")
            comando = ['libreoffice', '--headless', '--convert-to', 'pdf', '--outdir', ruta_descargas, os.path.abspath(archivo_origen)]
            subprocess.run(comando, check=True)
            log_mensaje(f"✅ Converted: {archivo_nombre} a PDF.")
            
        else:
            messagebox.showerror("Error", f"SO not supported: {sistema_operativo}")

    except Exception as e:
        log_mensaje(f"❌ Conversion error: {e}")

    log_mensaje("Conversión Word a PDF finalizada.")


# Noteboog Directory

def seleccionar_carpeta_origen():
    carpeta_origen = filedialog.askdirectory()
    if carpeta_origen:
        entrada_origen.config(state="normal")
        entrada_origen.delete(0, tk.END)
        entrada_origen.insert(0, carpeta_origen)
        entrada_origen.config(state="disabled")

def seleccionar_carpeta_destino():
    carpeta_destino = filedialog.askdirectory()
    if carpeta_destino:
        entrada_destino.config(state="normal")
        entrada_destino.delete(0, tk.END)
        entrada_destino.insert(0, carpeta_destino)
        entrada_destino.config(state="disabled")

def convertir_pdf_a_word():
    carpeta_origen = entrada_origen.get()
    carpeta_destino = entrada_destino.get()
    
    if not carpeta_origen or not carpeta_destino:
        messagebox.showerror("Error", "You must select both routes")
        return

    log_mensaje("Starting PDF to Word conversion ...")

    for archivo in os.listdir(carpeta_origen):
        if archivo.lower().endswith('.pdf'):
            archivo_pdf = os.path.join(carpeta_origen, archivo)
            archivo_docx = os.path.join(carpeta_destino, archivo.replace('.pdf', '.docx'))
            
            log_mensaje(f"Converting: {archivo}...")
            try:
                cv = Converter(archivo_pdf)
                cv.convert(archivo_docx, start=0, end=None)
                cv.close()
                log_mensaje(f"✅ Converted: {archivo} to Docx.")
            except Exception as e:
                log_mensaje(f"❌ Error converting {archivo}: {e}")

    log_mensaje("PDF to Word conversion complete.")

def convertir_docx_a_pdf():
    carpeta_origen = entrada_origen.get()
    carpeta_destino = entrada_destino.get()

    if not carpeta_origen or not carpeta_destino:
        messagebox.showerror("Error", "You must select both routes")
        return

    log_mensaje("Starting Word to PDF conversion...")

    try:
        if sistema_operativo == 'Windows':
            word = comtypes.client.CreateObject("Word.Application")
            word.Visible = False

            for archivo in os.listdir(carpeta_origen):
                if archivo.lower().endswith('.docx'):
                    archivo_docx = os.path.abspath(os.path.join(carpeta_origen, archivo))
                    archivo_pdf = os.path.abspath(os.path.join(carpeta_destino, archivo.replace('.docx', '.pdf')))
                    
                    log_mensaje(f"Converting: {archivo}...")
                    doc = word.Documents.Open(archivo_docx)
                    doc.SaveAs(archivo_pdf, FileFormat=17)
                    doc.Close()
                    log_mensaje(f"✅ Converted: {archivo} a PDF.")
            
            word.Quit()

        elif sistema_operativo == 'Linux':
            for archivo in os.listdir(carpeta_origen):
                if archivo.lower().endswith('.docx'):
                    archivo_docx = os.path.abspath(os.path.join(carpeta_origen, archivo))
                    log_mensaje(f"Converting: {archivo}...")
                    comando = ['libreoffice', '--headless', '--convert-to', 'pdf', '--outdir', carpeta_destino, archivo_docx]
                    subprocess.run(comando, check=True)
                    log_mensaje(f"✅ Converted: {archivo} a PDF.")
                    
        else:
            messagebox.showerror("Error", f"SO not supported: {sistema_operativo}")

    except Exception as e:
        log_mensaje(f"❌ Conversion error: {e}")

    log_mensaje("Conversión Word a PDF finalizada.")

ventana = tk.Tk()
ventana.title("LegionSoft - Converter (PDF/Word & Word/PDF)")
ventana.geometry("586x380")
ventana.resizable(False,False)
ventana.iconbitmap('icono.ico')

notebook = ttk.Notebook(ventana)
notebook.pack(expand=True, fill='both')

tab_directory = tk.Frame(notebook)
notebook.add(tab_directory, text="Directory")

frame_directory = tk.Frame(tab_directory)
frame_directory.pack(pady=10, padx=10, fill='x')

tk.Label(frame_directory, text="Source Folder:").grid(row=0, column=0, sticky='w')
origen_frame = tk.Frame(frame_directory)
origen_frame.grid(row=1, column=0, sticky='ew', pady=(0, 10))
entrada_origen = tk.Entry(origen_frame, width=90, state="disabled")
entrada_origen.pack(side=tk.LEFT, fill='x', expand=True)
tk.Button(origen_frame, text="+", command=seleccionar_carpeta_origen).pack(side=tk.LEFT)

tk.Label(frame_directory, text="Destination Folder:").grid(row=2, column=0, sticky='w')
destino_frame = tk.Frame(frame_directory)
destino_frame.grid(row=3, column=0, sticky='ew')
entrada_destino = tk.Entry(destino_frame, width=90, state="disabled")
entrada_destino.pack(side=tk.LEFT, fill='x', expand=True)
entrada_destino.insert(0, ruta_descargas)
tk.Button(destino_frame, text="+", command=seleccionar_carpeta_destino).pack(side=tk.LEFT)

frame_botones = tk.Frame(tab_directory)
frame_botones.pack(pady=10)
tk.Button(frame_botones, text="PDF to Word", command=convertir_pdf_a_word).pack(side=tk.LEFT, padx=10)
tk.Button(frame_botones, text="Word to PDF", command=convertir_docx_a_pdf).pack(side=tk.LEFT, padx=10)



tab_file = tk.Frame(notebook)
notebook.add(tab_file, text="File")

frame_file = tk.Frame(tab_file)
frame_file.pack(pady=10, padx=10, fill='x')

tk.Label(frame_file, text="Choose the document:").grid(row=0, column=0, sticky='w')
origen_frame = tk.Frame(frame_file)
origen_frame.grid(row=1, column=0, sticky='ew', pady=(0, 10))
entrada_file = tk.Entry(origen_frame, width=90, state="disabled")
entrada_file.pack(side=tk.LEFT, fill='x', expand=True)
tk.Button(origen_frame, text="+", command=seleccionar_archivo).pack(side=tk.LEFT)

frame_botones_file = tk.Frame(tab_file)
frame_botones_file.pack(pady=10)
tk.Button(frame_botones_file, text="PDF to Word", command=convertir_pdf_to_word).pack(side=tk.LEFT, padx=10)
tk.Button(frame_botones_file, text="Word to PDF", command=convertir_docx_to_pdf).pack(side=tk.LEFT, padx=10)

tk.Label(tab_file, text='They will be downloaded automatically in the following path: '+ruta_descargas).pack(padx=10, pady=10)


# Área de texto para logs
text_area = tk.Text(ventana, height=10, state="disabled")
text_area.pack(fill='both', padx=10, pady=10)

ventana.mainloop()
